{
	"compiler": {
		"version": "0.8.12+commit.f00d7308"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_feeToSetter",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"name": "InvalidAddressParameters",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Unauthorized",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "token0",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token1",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "pair",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "PairCreated",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "INIT",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "allPairs",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "allPairsLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenA",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenB",
						"type": "address"
					}
				],
				"name": "createPair",
				"outputs": [
					{
						"internalType": "address",
						"name": "pair",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeTo",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "feeToSetter",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "getPair",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_feeTo",
						"type": "address"
					}
				],
				"name": "setFeeTo",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_feeToSetter",
						"type": "address"
					}
				],
				"name": "setFeeToSetter",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"PairCreated(address,address,address,uint256)": {
					"details": "Emitted each time a pair is created via `createPair`. token0 is guaranteed to be strictly less than token1 by sort order. The final uint log value will be 1 for the first pair created, 2 for the second, etc."
				}
			},
			"kind": "dev",
			"methods": {
				"createPair(address,address)": {
					"details": "tokenA and tokenB are interchangeable. Emits `PairCreated` event.",
					"params": {
						"tokenA": "Address of the first token.",
						"tokenB": "Address of the second token."
					},
					"returns": {
						"pair": "Address of the created pair."
					}
				},
				"setFeeTo(address)": {
					"details": "Can only be called by the `feeToSetter`.",
					"params": {
						"_feeTo": "The new address of the charge recipient."
					}
				},
				"setFeeToSetter(address)": {
					"details": "Can only be called by the previous `feeToSetter`.",
					"params": {
						"_feeToSetter": "The new address which would be allowed to set the protocol-wide charge."
					}
				}
			},
			"stateVariables": {
				"allPairs": {
					"details": "Pass 0 for the address of the first pair created, 1 for the second, etc."
				},
				"getPair": {
					"details": "tokenA and tokenB are interchangeable. Pair addresses can also be calculated deterministically."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"INIT()": {
					"notice": "Init codehash used in Dex Library to calculate pair address without any external calls."
				},
				"allPairs(uint256)": {
					"notice": "Returns the address of the nth pair (0-indexed) created through the factory, or address(0) if not enough pairs have been created yet."
				},
				"allPairsLength()": {
					"notice": "Returns the total number of pairs created through the factory so far."
				},
				"createPair(address,address)": {
					"notice": "Creates a pair for tokenA and tokenB if one doesn't exist already."
				},
				"feeTo()": {
					"notice": "the recipient of the protocol-wide charge."
				},
				"feeToSetter()": {
					"notice": "The address allowed to change `feeTo`."
				},
				"getPair(address,address)": {
					"notice": "Returns the address of the pair for tokenA and tokenB, if it has been created, else address(0)."
				},
				"setFeeTo(address)": {
					"notice": "Sets the new address of the protocol-wide charge recipient."
				},
				"setFeeToSetter(address)": {
					"notice": "Sets the address which is allowed to control protocol-wide charge recipients."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/swap/DexFactory.sol": "DexFactory"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/interfaces/IDexCallee.sol": {
			"keccak256": "0xd8b1dfddde31dd97ed0459a34bf2adeb8c72e993e1ec61a6feb73f2bc75c64d5",
			"license": "MIT",
			"urls": [
				"bzz-raw://1472adb551bdf4fff82e8f9265272368870797c0d5ac6b5ae7cce594c9b2b420",
				"dweb:/ipfs/QmTN3Xr8QrwUJz2AofDpEnJmK1LV9UsN2Svv1m1LeF2hPt"
			]
		},
		"contracts/interfaces/IDexFactory.sol": {
			"keccak256": "0x140269cf47872c1307e3feeb3d38dd1d998c536d06cd1bf10293ac4bd8f3bb89",
			"license": "MIT",
			"urls": [
				"bzz-raw://9a73742e25fa1c88957cb605ba2dee751e14c0c0b688c2475e697c82898b36bc",
				"dweb:/ipfs/Qmc3pMYzh3Bu7dUJZwn3x13wnKqi1MYTWw6cKbjGVAYxms"
			]
		},
		"contracts/interfaces/IDexKIP7.sol": {
			"keccak256": "0x8c1d02db5d95890a753f8939dfdb080da7605f22bb2f2e2511b3c2c9a3371913",
			"license": "MIT",
			"urls": [
				"bzz-raw://5815bbd550619b73e7b454dd2f00bfefdb5d5f9f19117b20dcaf43c5210615c7",
				"dweb:/ipfs/QmaFsfiy1HZhLZfgEDvTrWr1p7S2NKvq81QKTqZPWLDEfs"
			]
		},
		"contracts/interfaces/IDexPair.sol": {
			"keccak256": "0x8ed5bd49ab395486a56c9091754d24e97f2379b17cb22c870636100e8929496e",
			"license": "MIT",
			"urls": [
				"bzz-raw://c299d9ca0b5eefcef749a53638baec061999a337d86299da5b5e400d4eb751b9",
				"dweb:/ipfs/QmTQoziMn6MqcUMdjqT37MtyZo43p7dkYCicxqa2aozjft"
			]
		},
		"contracts/interfaces/IKIP13.sol": {
			"keccak256": "0x7a14f5f26986bd1ff8cdac9f1892594714898f6bc30e27f8630fdd0420813df8",
			"license": "MIT",
			"urls": [
				"bzz-raw://b9d87ce0ca1975862d0f34202578f2dbb1d9057f2d9fd27672703fcb7ababf6f",
				"dweb:/ipfs/QmdTEHGuYcKN5Upp7gy7bHkcRGu7iDzsFJrxuPSStR9DLz"
			]
		},
		"contracts/interfaces/IKIP7.sol": {
			"keccak256": "0xa76bc0f996e8e475cae3f756dce521d0fab8f1b1e49b33fc79b096f86606463d",
			"license": "MIT",
			"urls": [
				"bzz-raw://08b3808724b9a02d3d4fd911446579c4b42fcc76dd07795e74875acb22115537",
				"dweb:/ipfs/Qmf7HU4DTj7NFSdWac22P3Lp8Dgo7a4DotvdGLJDLzmKk1"
			]
		},
		"contracts/interfaces/IKIP7Metadata.sol": {
			"keccak256": "0xdb54e2f401900e6e7b57cc5dddebd23e9176fe897dcd477f4c6ab471ace71c80",
			"license": "MIT",
			"urls": [
				"bzz-raw://14471a04027df9ca5b804a2b76f75220e835f410c661f8640a499aa4e273bff6",
				"dweb:/ipfs/QmcHqJKHa2WuDmTQyuCZpuw6NBfKABe8FZjtNR6t6vfQbv"
			]
		},
		"contracts/interfaces/IKIPReciever.sol": {
			"keccak256": "0x3706d09b9c27a68a6edf53672ce27bd0294e3086ebaa7422469787d5fba33cb3",
			"license": "MIT",
			"urls": [
				"bzz-raw://3110b5ec8e13a2a743b7953e3abc4053069aec6318c6e1846167dda7b8a0c11e",
				"dweb:/ipfs/QmUWDaHCXioaMvwfZiEjAT8V48n8DmCrbiADtKzR7ciYp3"
			]
		},
		"contracts/libraries/Math.sol": {
			"keccak256": "0x17e91f2ff6751d47d2addec00767fb0d5ce4b7b7991677c1942f11fabe6c338e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://12d648600dd5e3b48c98ca7800decf2f773a97454f6b957ad459d3687b888c9d",
				"dweb:/ipfs/QmdFbcStJ4FKQMMZZJVBU5THwabSSZMWmin6zumAwdhkpS"
			]
		},
		"contracts/libraries/UQ112x112.sol": {
			"keccak256": "0x33b30199f66af4a53ea537da5b331a7ff6cccf31a3fe0faedea375f9c14a56e0",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://014e58e9bfbd6deb76891d4458e6090c6d98f31c7c633e904bd498a306dff0d6",
				"dweb:/ipfs/QmZTh3knA6iwvs5ewC1cCfDCTMswNY4MjWZAgu4VuAeE6P"
			]
		},
		"contracts/swap/DexFactory.sol": {
			"keccak256": "0x79bf8b8f9021fbc5504685c5a10d553fdb24e0cc7aa7eaf4216fdea2f162e004",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://e8e0fd0e9d573846b75f8a791ef09dc93e188d1419bb2b465d460be41f1c9df2",
				"dweb:/ipfs/Qmc1f9eSpi8RBBmXPCmd4hVTw48UtZSLDvtiUfRfg17K1b"
			]
		},
		"contracts/swap/DexKIP7.sol": {
			"keccak256": "0xbca294d9df50c4e70f480b37b01d9bbfb74bb8d15beced95db836ab91d388223",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ed7b0e47e9342ff0f92e8222919a61a70763323fcb1b94cd5052260f7ea09997",
				"dweb:/ipfs/QmZ2tpiJupEUP9qgPekChB8B1uiLPMQFADcPMGGQEjRk4s"
			]
		},
		"contracts/swap/DexPair.sol": {
			"keccak256": "0xb93cd58137ceb67c35fb4292ba850e8e9299dcfb9acea65a3f61d1c4fe4e5239",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://91ff80ff09f8246c30f8333f3d648d633b2afe7175595ab7b4ec46bdd2bcd609",
				"dweb:/ipfs/QmfJ4mKcCc6sepKeT6RgqFR8KeRfoDqfjKCnN4SYmZAMr3"
			]
		},
		"contracts/swap/Errors.sol": {
			"keccak256": "0x03a72d32a65c0b9a4ae5690cd0e0466ef281abe6f125ba7b53b8288796ccf095",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://cb67fdff14bee344b8d6a0704175bdb81fdd74358db53f6c4cb28c8280dc5cd5",
				"dweb:/ipfs/Qmbi4EkKfSGpYL4uisJkTKCtdLGnq3b1y7HykY5i6vguRS"
			]
		},
		"contracts/utils/Address.sol": {
			"keccak256": "0xb57dabefc531c2208339cfaae62c123c2794a4a74072c6e7c52f139d559385b4",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://4e9101d24081d872d994172bd11e5993d2d19c18a82b839d6c0b1220117addfd",
				"dweb:/ipfs/Qmdtdktp8wD72pnowdvGQJ6JPaM9DJNfzjb8JdBrWVuqjd"
			]
		},
		"contracts/utils/KIP13.sol": {
			"keccak256": "0xcfb579da54601f708c12c73288c2ecca9991470fb934364f99441c95da81ae9f",
			"license": "MIT",
			"urls": [
				"bzz-raw://16104bfba377935222fa7fb317cb7260c4fc46f6080e1cdcc5f40eb99ec00e84",
				"dweb:/ipfs/QmQGU3mzZwLBq5xDu8MUiTfhv2MTHoDVTCq7tQJuv2Gwi6"
			]
		}
	},
	"version": 1
}