{
	"compiler": {
		"version": "0.8.12+commit.f00d7308"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_ptn",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_ptnPerBlock",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_startBlock",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allocPoint",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "bonusMultiplier",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "bonusEndBlock",
						"type": "uint256"
					}
				],
				"name": "AddPool",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "EmergencyWithdraw",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "allocPoint",
						"type": "uint256"
					}
				],
				"name": "SetPool",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "lastRewardBlock",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "lpSupply",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "accPtnPerShare",
						"type": "uint256"
					}
				],
				"name": "UpdatePool",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "multiplier",
						"type": "uint256"
					}
				],
				"name": "UpdatePoolMultiplier",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rewardPerBlock",
						"type": "uint256"
					}
				],
				"name": "UpdateRewardPerBlock",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "pid",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_allocPoint",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_lpToken",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "_withUpdate",
						"type": "bool"
					},
					{
						"internalType": "uint256",
						"name": "_bonusMultiplier",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_bonusEndBlock",
						"type": "uint256"
					}
				],
				"name": "add",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "addedTokens",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					}
				],
				"name": "emergencyWithdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_from",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_to",
						"type": "uint256"
					}
				],
				"name": "getMultiplier",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "massUpdatePools",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					}
				],
				"name": "pendingPtn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "poolInfo",
				"outputs": [
					{
						"internalType": "address",
						"name": "lpToken",
						"type": "address"
					},
					{
						"internalType": "uint32",
						"name": "bonusMultiplier",
						"type": "uint32"
					},
					{
						"internalType": "uint64",
						"name": "bonusEndBlock",
						"type": "uint64"
					},
					{
						"internalType": "uint256",
						"name": "totalStaked",
						"type": "uint256"
					},
					{
						"internalType": "uint64",
						"name": "allocPoint",
						"type": "uint64"
					},
					{
						"internalType": "uint64",
						"name": "lastRewardBlock",
						"type": "uint64"
					},
					{
						"internalType": "uint128",
						"name": "accPtnPerShare",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "poolLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ptn",
				"outputs": [
					{
						"internalType": "contract IPlatformToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ptnPerBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_allocPoint",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "_withUpdate",
						"type": "bool"
					}
				],
				"name": "set",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "startBlock",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "totalAllocPoint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_multiplier",
						"type": "uint256"
					}
				],
				"name": "updateMultiplier",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					}
				],
				"name": "updatePool",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_ptnPerBlock",
						"type": "uint256"
					}
				],
				"name": "updatePtnPerBlock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "userInfo",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rewardDebt",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_pid",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "withdraw",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"add(uint256,address,bool,uint256,uint256)": {
					"params": {
						"_allocPoint": "Number of allocation points for the new pool.",
						"_bonusMultiplier": "The pool reward multipler.",
						"_lpToken": "Address of the LP KIP7 token.",
						"_withUpdate": "Whether call \"massUpdatePools\" operation."
					}
				},
				"deposit(uint256,uint256)": {
					"params": {
						"_amount": "Amount of LP tokens to deposit.",
						"_pid": "The id of the pool. See `poolInfo`."
					}
				},
				"emergencyWithdraw(uint256)": {
					"details": "Withdraw without caring about the rewards. EMERGENCY ONLY.",
					"params": {
						"_pid": "The id of the pool. See `poolInfo`."
					}
				},
				"getMultiplier(uint256,uint256,uint256)": {
					"details": "Returns reward multiplier over the given `_from` to `_to` block for `_pid` pool.",
					"params": {
						"_from": "Start block number",
						"_pid": "The id of the pool. See `poolInfo`.",
						"_to": "End block number"
					}
				},
				"massUpdatePools()": {
					"details": "Update PTN reward for all the active pools. Be careful of gas spending!"
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pendingPtn(uint256,address)": {
					"details": "View function for checking pending PTN rewards.",
					"params": {
						"_pid": "The id of the pool. See `poolInfo`.",
						"_user": "Address of the user."
					}
				},
				"poolLength()": {
					"details": "Returns the number of farming pools."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"set(uint256,uint256,bool)": {
					"params": {
						"_allocPoint": "New number of allocation points for the pool.",
						"_pid": "The id of the pool. See `poolInfo`.",
						"_withUpdate": "Whether call \"massUpdatePools\" operation."
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updateMultiplier(uint256,uint256)": {
					"details": "Update reward multiplier for `_pid` pool.",
					"params": {
						"_multiplier": "The new pool rewards multiplier.",
						"_pid": "The id of the pool. See `poolInfo`."
					}
				},
				"updatePool(uint256)": {
					"params": {
						"_pid": "The id of the pool. See `poolInfo`."
					}
				},
				"withdraw(uint256,uint256)": {
					"params": {
						"_amount": "Amount of LP tokens to withdraw.",
						"_pid": "The id of the pool. See `poolInfo`."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"add(uint256,address,bool,uint256,uint256)": {
					"notice": "Adds a new LP farming pool."
				},
				"deposit(uint256,uint256)": {
					"notice": "Deposit LP tokens to the `_pid` pool."
				},
				"poolInfo(uint256)": {
					"notice": "Info of each pool."
				},
				"ptn()": {
					"notice": "The PTN(Platform token) TOKEN!"
				},
				"ptnPerBlock()": {
					"notice": "PTN tokens created per block."
				},
				"set(uint256,uint256,bool)": {
					"notice": "Update the given pool's PTN allocation point."
				},
				"startBlock()": {
					"notice": "The block number when PTN mining starts."
				},
				"totalAllocPoint()": {
					"notice": "Total allocation points. Must be the sum of all allocation points in all pools."
				},
				"updatePool(uint256)": {
					"notice": "Update reward variables for the given pool."
				},
				"userInfo(uint256,address)": {
					"notice": "Info of each user that stakes LP tokens."
				},
				"withdraw(uint256,uint256)": {
					"notice": "Withdraw LP tokens from the `_pid` pool."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/farming/Farming.sol": "Farming"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/farming/Farming.sol": {
			"keccak256": "0x7d3a46b953566559e127190c85ead279ed12c4cd6208d5da2d31e03a2e4bc865",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f13b37d4586ecea848b7f95f06ccd253a4a217f0feb1e3e8bce0ddb7f236066b",
				"dweb:/ipfs/QmavkcV2upbLP84mZ5QoxR2g8gmzsBdXYsRhqyZVocdyRC"
			]
		},
		"contracts/interfaces/IAccessControl.sol": {
			"keccak256": "0x6edba116c3de120257f96a0e2cf286645d5b3317a06a20cbf933f1fa2166d7f6",
			"license": "MIT",
			"urls": [
				"bzz-raw://e2ae40556690160edd76ca00a6a2f88947d127cb1de0d5ac4ae373d118eaecb7",
				"dweb:/ipfs/QmTuNz3XMXdbtLA5YQzdrXxYvpqiTpjegk2EuLeSRmrAHL"
			]
		},
		"contracts/interfaces/IKIP13.sol": {
			"keccak256": "0x7a14f5f26986bd1ff8cdac9f1892594714898f6bc30e27f8630fdd0420813df8",
			"license": "MIT",
			"urls": [
				"bzz-raw://b9d87ce0ca1975862d0f34202578f2dbb1d9057f2d9fd27672703fcb7ababf6f",
				"dweb:/ipfs/QmdTEHGuYcKN5Upp7gy7bHkcRGu7iDzsFJrxuPSStR9DLz"
			]
		},
		"contracts/interfaces/IKIP7.sol": {
			"keccak256": "0xa76bc0f996e8e475cae3f756dce521d0fab8f1b1e49b33fc79b096f86606463d",
			"license": "MIT",
			"urls": [
				"bzz-raw://08b3808724b9a02d3d4fd911446579c4b42fcc76dd07795e74875acb22115537",
				"dweb:/ipfs/Qmf7HU4DTj7NFSdWac22P3Lp8Dgo7a4DotvdGLJDLzmKk1"
			]
		},
		"contracts/interfaces/IKIP7Metadata.sol": {
			"keccak256": "0xdb54e2f401900e6e7b57cc5dddebd23e9176fe897dcd477f4c6ab471ace71c80",
			"license": "MIT",
			"urls": [
				"bzz-raw://14471a04027df9ca5b804a2b76f75220e835f410c661f8640a499aa4e273bff6",
				"dweb:/ipfs/QmcHqJKHa2WuDmTQyuCZpuw6NBfKABe8FZjtNR6t6vfQbv"
			]
		},
		"contracts/interfaces/IPlatformToken.sol": {
			"keccak256": "0xe9e44d7ec50bdbf0c6264044790d93fd2f529b1db3e4838df2299daf04d9bb55",
			"license": "MIT",
			"urls": [
				"bzz-raw://49b156d7aa9d759d8d503f8062f80e28202e861b77adf8d5dd7afdd6368ff03b",
				"dweb:/ipfs/QmegpJRQ7RCeKh2Cg5ccHYY46odopjuENyX64CroRM2Nsv"
			]
		},
		"contracts/interfaces/IVotes.sol": {
			"keccak256": "0x6f90ed8b999f69f52b6ddb0f0e5495583d0854fac2d91b36510b251c9f14c466",
			"license": "MIT",
			"urls": [
				"bzz-raw://5aa8900287c762c1784d7fa8fa2a022e6ab7c1ffd4acf39de10e5eba1c4ed5d5",
				"dweb:/ipfs/QmQW8gLt6qQZVsLADqLPrRowCqyeg2rpgC1aFt6DX13Q2t"
			]
		},
		"contracts/interfaces/draft-IKIP7Permit.sol": {
			"keccak256": "0xdf528e41df0ee57e728fe9958b53549739bf73940f248119060c6e52a5600270",
			"license": "MIT",
			"urls": [
				"bzz-raw://6ef2564d5ff6689596243de8de8a4a47a220e3dc5b201e32fba8f99588c38f15",
				"dweb:/ipfs/QmfMYp51sHTJNZWawMAq3NcZ2fz6uMB4ehgcLTS1NTi6YP"
			]
		},
		"contracts/libraries/TransferHelper.sol": {
			"keccak256": "0xad84dd9dd682cb4c347267f2472ac63e87855e6a036164e726568de2a5908f39",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://3be02fab4d9f1e80002a04076ff285a959636fe371f9540c02344050db41006e",
				"dweb:/ipfs/QmUCcVYfsHsPdWX6Wfpb2CeZXFEzos1k67Jb1oAGPAygaN"
			]
		},
		"contracts/utils/Context.sol": {
			"keccak256": "0x2d9821ede311a3c16183811be8bdc666e88c69d9d50321e3dff025fe7630d373",
			"license": "MIT",
			"urls": [
				"bzz-raw://3719bc7fe267a79e84641b88901b10dbc58d27edaea65b7811d39ca7d2a3e409",
				"dweb:/ipfs/QmRDDpaByM3MhWs61gXmfaxoygifCJhLvguEFDGahhWMfX"
			]
		},
		"contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0xd29d3ea88157ac9005430d38c36abbd86ab628fb5cb3c4c3fb91d2a5a09bff51",
			"license": "MIT",
			"urls": [
				"bzz-raw://b0397e4f880919b51cc8d787dc31754b87d8d2d72ffc12c3a7b355914906b85d",
				"dweb:/ipfs/QmTA6qAG3vbACNSD1NATLWweKookxM5XqUhu4s12PZmKnU"
			]
		},
		"contracts/utils/SafeCast.sol": {
			"keccak256": "0x4499c37a4b7439a12779a6938fc023719076f9bf6774bfa255583dac40204776",
			"license": "MIT",
			"urls": [
				"bzz-raw://50b79d1f9649c7ff7d9a648c30460e8407d8dfd4440df3e22ef4ef824c90d5d8",
				"dweb:/ipfs/QmYB9UzMjvgSQPfpkH7Ews8zZEwaU8oy4SnxQQtYQ8fg7m"
			]
		},
		"contracts/utils/access/Ownable.sol": {
			"keccak256": "0x5bb9949454bb5ece967e059879d7865e6d56bf976aef1745e6934b88c310d4e5",
			"license": "MIT",
			"urls": [
				"bzz-raw://757e5ff1ff0772f1fe507771f47f73e40dacddb8a2d19a5e01a41c117b4a2fcb",
				"dweb:/ipfs/QmfGhQ8D9vWiAvUQjAzEiHaD37vaQqpcLZ7iaWHUjQrwuf"
			]
		}
	},
	"version": 1
}